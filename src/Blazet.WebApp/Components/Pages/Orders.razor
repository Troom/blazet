@using Blazet.Application.Orders.Commands
@using Blazet.Application.Orders.DTOs
@using Blazet.Application.Orders.Queries
@using Blazet.WebApp.Core.Constants
@using MediatR
@rendermode InteractiveServer
@attribute [Route(PageRoutes.OrderList)]
@inject IMediator _mediator


<PageTitle>Zamówienia</PageTitle>

<h1>Zamówienia</h1>

<MudCard>
    <MudDataGrid T="OrderDto" Items="Elements" Dense="true" Bordered="true" Outlined="true"
        ReadOnly="false" EditTrigger="DataGridEditTrigger.OnRowClick" EditMode="DataGridEditMode.Cell">
    <Columns>
        <PropertyColumn Property="x=>x.InternalNumber" Title="Numer zamówienia" IsEditable=false />
            <PropertyColumn Property="x=>x.Price" Title="Cena" Context="ctx">
                <FooterTemplate>
                    <MudText>@ctx.Items.Sum(x => x.Price)</MudText>
                </FooterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x=>x.Quantity" Title="Ilość" Context="ctx" >
             <FooterTemplate>
                 <MudText>@ctx.Items.Sum(x => x.Quantity)</MudText>
               </FooterTemplate>
            </PropertyColumn>
            <TemplateColumn IsEditable="false" Title="Actions">
                <CellTemplate Context="ctx">
                    <MudButtonGroup>
                        <MudButton OnClick='()=> Delete(ctx.Item)'><MudIcon Style="font-size: 1rem;" Icon="@Icons.Material.Filled.Delete" Title="Delete" /></MudButton>
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
    </Columns>
    </MudDataGrid>

    <MudButtonGroup>
        <MudButton OnClick="AddOrder">Add</MudButton>
        <MudButton>Edit</MudButton>
        <MudButton>Delete</MudButton>
    </MudButtonGroup>

    <MudButton OnClick='()=> ReloadServer()'><MudIcon Style="font-size: 1rem;" Icon="@Icons.Material.Filled.SaveAlt" Title="reload" /></MudButton>

</MudCard>

@code {
    private OrderDto Model = new() { InternalNumber = "1", Price = 10, Quantity = 3 };
    private List<OrderDto> Elements = new() {
        new(){ InternalNumber = "1", Price = 10, Quantity = 3 },
        new(){InternalNumber = "2", Price = 12, Quantity = 32 },
        new(){InternalNumber = "3", Price = 14, Quantity = 33 },
        new(){InternalNumber = "4", Price = 16, Quantity = 34 },
        };

    public async Task AddOrder()
    {
        Elements.Add(new OrderDto { InternalNumber = (Elements.Count() + 1).ToString(), Price = 0, Quantity = 1 });
        var command = new AddOrderCommand(0, 1);
        await _mediator.Send(command);
    }
    public void Delete(OrderDto orderDto)
    {
        Elements.Remove(orderDto);
    }
    private int currentCount = 0;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await ReloadServer();

    }

    private async Task ReloadServer()
    {
        try
        {

            _loading = true;

            var query = new OrderDtoItemListQuery();

            var result = await _mediator.Send(query);
            Elements = result;
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {

            _loading = false;
        }

    
    }

}
