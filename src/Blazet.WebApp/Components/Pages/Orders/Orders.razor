@using Blazet.Application.Orders.Commands
@using Blazet.Application.Orders.DTOs
@using Blazet.Application.Orders.Queries
@using Blazet.WebApp.Components.Pages.Orders.Components
@using Blazet.WebApp.Core.Constants
@using MediatR
@rendermode InteractiveServer
@attribute [Route(PageRoutes.OrderList)]
@inject IMediator _mediator
<PageTitle>Orders</PageTitle>
<h1>Orders</h1>
<MudCard>
    <MudDataGrid T="OrderDto" Items="Elements" Dense="true" Bordered="true" Outlined="true"
                 ReadOnly="false" EditTrigger="DataGridEditTrigger.OnRowClick" EditMode="DataGridEditMode.Cell"
                 CommittedItemChanges="@CommittedItemChanges" RowClick="@RowClicked">
        <Columns>
            <PropertyColumn Property="x => x.InternalNumber" Title="Internal Number" IsEditable=false/>
            <PropertyColumn Property="x => x.Price" Title="Price" Context="ctx">
                <FooterTemplate>
                    <MudText>@ctx.Items.Sum(x => x.Price)</MudText>
                </FooterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Quantity" Title="Quantity" Context="ctx">
                <FooterTemplate>
                    <MudText>@ctx.Items.Sum(x => x.Quantity)</MudText>
                </FooterTemplate>
            </PropertyColumn>
            <TemplateColumn IsEditable="false" Title="Actions">
                <CellTemplate Context="ctx">
                    <MudButtonGroup>
                        <MudButton OnClick='() => DeleteOrder(ctx.Item)'><MudIcon Style="font-size: 1rem;" Icon="@Icons.Material.Filled.Delete" Title="Delete"/></MudButton>
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <MudButtonGroup>
        <MudButton OnClick="AddOrder">Add</MudButton>
    </MudButtonGroup>
    <MudButton OnClick='() => ReloadServer()'><MudIcon Style="font-size: 1rem;" Icon="@Icons.Material.Filled.SaveAlt" Title="reload"/></MudButton>
</MudCard>

@code {
    private List<OrderDto> Elements = new();
    [CascadingParameter]
    public Error? Error { get; set; }

    private OrderDto TmpItem { get; set; } = new();

    public async Task AddOrder()
    {
        try
        {
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
            var dialog = DialogService.Show<AddOrderComponent>("Add order", options);
            await ReloadServer();
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }
    }
    public async Task StartedEditingItem(OrderDto item)
    {
        TmpItem.Price = item.Price;
        TmpItem.Quantity = item.Quantity;
    }
    public async Task CommittedItemChanges(OrderDto item)
    {
        try
        {
            var command = new UpdateOrderCommand(item.Id, item.Price, item.Quantity);
            await _mediator.Send(command);
        }
        catch (Exception e)
        {
            await Error.ProcessError(e);

            item.Price = TmpItem.Price;
            item.Quantity = TmpItem.Quantity;
        }
    }

    public async Task DeleteOrder(OrderDto orderDto)
    {
        var command = new DeleteOrderCommand(orderDto.Id);
        await _mediator.Send(command);
    }
    private int currentCount = 0;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);//Workaround for proper display dialogService in Error.ProcessError
        await ReloadServer();
    }

    private async Task ReloadServer()
    {
        try
        {
            _loading = true;
            var query = new OrderDtoItemListQuery();
            var result = await _mediator.Send(query);
            Elements = result;
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }
        finally
        {
            _loading = false;
        }        
    }
    void RowClicked(DataGridRowClickEventArgs<OrderDto> args)
    {
        TmpItem.Price = args.Item.Price;
        TmpItem.Quantity = args.Item.Quantity;
    }
}
