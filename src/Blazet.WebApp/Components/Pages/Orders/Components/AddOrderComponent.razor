@using Blazet.Application.Orders.Commands
@using Blazet.Application.Orders.DTOs
@using Blazet.Infrastructure.Constants
@using Blazored.FluentValidation
@using MediatR

@inject IMediator _mediator
@inherits MudComponentBase
<EditForm Model="Model" @ref="editForm" OnValidSubmit="Submit">
    <FluentValidationValidator/>
    <ValidationSummary/>
<MudDialog>
    <DialogContent>
            <MudNumericField @bind-Value="Model.Price" Label="Price" For="() => Model.Price"/>
            <MudNumericField @bind-Value="Model.Quantity" Label="Quantity" For="() => Model.Quantity" />
    </DialogContent>
        <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;
    bool _saving;
    OrderDto Model;
    EditForm editForm;
    protected override Task OnInitializedAsync()
    {
        if (Model is null)
            Model = new();
        editForm = new() { EditContext = new(Model) };
        return base.OnInitializedAsync();
    }

    private async Task Submit()
    {
        try
        {
            if (!editForm.EditContext.Validate())
                return;
            _saving = true;
            var command = new AddOrderCommand(Model.Price, Model.Quantity);

            var result = await _mediator.Send(command);

            if (result.Succeeded)
                MudDialog.Close(DialogResult.Ok(true));
        }
        finally
        {
            _saving = false;
        }
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
